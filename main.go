package main

import (
	"context"
	"crypto/tls"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"time"
)

const (
	BaseURL = "https://127.0.0.1:2999"
)

type Client struct {
	BaseURL    string
	apiKey     string
	HTTPClient *http.Client
}

type AutoGenerated struct {
	Events []struct {
		EventID    int           `json:"EventID"`
		EventName  string        `json:"EventName"`
		EventTime  float64       `json:"EventTime"`
		Assisters  []interface{} `json:"Assisters,omitempty"`
		KillerName string        `json:"KillerName,omitempty"`
		VictimName string        `json:"VictimName,omitempty"`
	} `json:"Events"`
}

func NewClient() *Client {
	return &Client{
		BaseURL: BaseURL,
		HTTPClient: &http.Client{
			Timeout: time.Minute,
			Transport: &http.Transport{TLSClientConfig: &tls.Config{InsecureSkipVerify: true}},
		},
	}
}

func (c *Client) GetEvents(ctx context.Context) (*AutoGenerated, error) {
	req, err := http.NewRequest("GET", fmt.Sprintf("%s/liveclientdata/eventdata", c.BaseURL), nil)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)

	res := AutoGenerated{}
	if err := c.sendRequest(req, &res); err != nil {
		return nil, err
	}
	return &res, nil
}


func (c *Client) sendRequest(req *http.Request, v interface{}) error {

	res, err := c.HTTPClient.Do(req)
	if err != nil {
		return err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {

		}
	}(res.Body)

	if err != nil || res.StatusCode/100 != 2 {
		return fmt.Errorf("unknown error, status code: %d", res.StatusCode)
	}

	if err = json.NewDecoder(res.Body).Decode(&v); err != nil {
		return err
	}

	return nil
}

func main() {

	client := NewClient()
	ctx := context.Background()

	event, err := client.GetEvents(ctx)

	fmt.Println(event)

	if err != nil {
		log.Fatal(err)
	}


}
